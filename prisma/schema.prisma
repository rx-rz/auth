generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin model
model Admin {
  id                  String               @id @unique() @default(cuid())
  email               String               @unique @db.VarChar(255)
  password            String               @db.VarChar(255)
  firstName           String               @map("first_name") @db.VarChar(255)
  lastName            String               @map("last_name") @db.VarChar(255)
  isVerified          Boolean              @default(false)
  mfaEnabled          Boolean              @default(false)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  projects            Project[]
  refreshTokens       RefreshToken[]
  adminNotifications  AdminNotification[]
  webAuthnCredentials WebAuthnCredential[]
  challenge           Challenge[]

  @@map("admins")
}

// Project model
model Project {
  id            String         @id @unique() @default(cuid())
  name          String         @db.VarChar(255)
  apiKey        String         @unique @db.VarChar(64)
  clientKey     String         @unique @default(cuid()) @db.VarChar(64)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  adminId       String         @map("admin_id")
  admin         Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users         User[]
  userProjects  UserProject[]
  refreshTokens RefreshToken[]
  magicLinks    MagicLink[]
  roles         Role[]
  logins        Login[]

  @@unique([name, adminId], name: "project_name_admin_id_unique")
  @@map("projects")
}

// User model
model User {
  id            String             @id @unique() @default(cuid())
  email         String             @unique @db.VarChar(255)
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  projects      Project[]
  userProjects  UserProject[]
  oauthAccounts UserOauthAccount[]
  magicLinks    MagicLink[]
  refreshTokens RefreshToken[]
  logins        Login[]

  @@map("users")
}

// Role model
model Role {
  id              String           @id @unique() @default(cuid())
  name            String           @db.VarChar(50)
  projectId       String           @map("project_id")
  project         Project          @relation(fields: [projectId], references: [id])
  rolePermissions RolePermission[]
  userProjects    UserProject[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@unique([name, projectId])
  @@map("roles")
}

// Permission model
model Permission {
  id              String           @id @unique() @default(cuid())
  name            String           @db.VarChar(200)
  description     String?
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("permissions")
}

// RolePermission model
model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// UserProject model
model UserProject {
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  password   String?  @db.Text
  firstName  String   @map("first_name") @db.VarChar(255)
  lastName   String   @map("last_name") @db.VarChar(255)
  projectId  String   @map("project_id")
  isVerified Boolean  @default(false)
  project    Project  @relation(fields: [projectId], references: [id])
  roleId     String?  @map("role_id")
  role       Role?    @relation(fields: [roleId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([roleId])
  @@map("user_projects")
}

// OAuthProvider model
model OAuthProvider {
  id            String             @id @unique() @default(cuid())
  name          String             @unique @db.VarChar(50)
  oauthAccounts UserOauthAccount[]
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  @@map("oauth_providers")
}

// UserOauthAccount model
model UserOauthAccount {
  id                    String        @id @unique() @default(cuid())
  userId                String        @map("user_id")
  providerId            String        @map("provider_id")
  providerUserId        String        @map("provider_user_id") @db.VarChar(255)
  accessToken           String?       @map("access_token")
  refreshToken          String?       @map("refresh_token")
  refreshTokenExpiresAt DateTime?     @map("refresh_token_expires_at")
  tokenCreatedAt        DateTime?     @map("token_created_at")
  tokenUpdatedAt        DateTime?     @map("token_updated_at")
  user                  User          @relation(fields: [userId], references: [id])
  provider              OAuthProvider @relation(fields: [providerId], references: [id])

  @@unique([providerId, providerUserId])
  @@index([userId])
  @@index([providerId])
  @@map("user_oauth_accounts")
}

// MagicLink model
model MagicLink {
  id        String   @id @unique() @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@map("magic_links")
}

// OTP model
model Otp {
  id        String   @id @unique() @default(cuid())
  email     String   @unique() @map("email")
  code      String   @db.VarChar(6)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("otps")
}

// RefreshToken model
model RefreshToken {
  id         String     @id @unique() @default(cuid())
  userId     String?    @map("user_id")
  adminId    String?    @map("admin_id")
  projectId  String?    @map("project_id")
  token      String     @unique
  expiresAt  DateTime   @map("expires_at")
  state      TokenState @default(ACTIVE)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  authMethod AuthMethod @default(EMAIL_AND_PASSWORD_SIGNIN)
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin      Admin?     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project    Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("refresh_tokens")
}

// AdminNotification model
model AdminNotification {
  id      String  @id @unique() @default(cuid())
  adminId String  @map("admin_id")
  title   String
  content String
  isRead  Boolean @default(false)

  createdAt DateTime                  @default(now()) @map("created_at")
  updatedAt DateTime                  @updatedAt @map("updated_at")
  admin     Admin                     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  severity  AdminNotificationSeverity
  type      AdminNotificationType

  @@index([adminId])
  @@map("admin_notifications")
}

model Challenge {
  id        String @id @unique() @default(cuid())
  adminId   String @unique()
  admin     Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  challenge String

  @@index([adminId])
}

model WebAuthnCredential {
  id             String   @id @unique() @default(cuid())
  userId         String
  publicKey      Bytes
  admin          Admin    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webauthnUserId String
  counter        BigInt?
  deviceType     String   @db.VarChar(32)
  backedUp       Boolean  @default(false)
  transports     String[]
  createdAt      DateTime @default(now())
  lastUsedAt     DateTime @updatedAt

  @@unique([userId, webauthnUserId])
  @@index([webauthnUserId])
  @@map("webauthn_credentials")
}

model Login {
  id         String      @id @unique() @default(cuid())
  userId     String      @map("user_id")
  projectId  String      @map("project_id")
  ipAddress  String      @map("ip_address")
  userAgent  String      @map("user_agent")
  authMethod AuthMethod
  status     LoginStatus
  createdAt  DateTime    @default(now()) @map("created_at")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project    Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("login")
}

enum TokenState {
  ACTIVE
  EXPIRED
  REVOKED
  BLACKLISTED
}

enum AdminNotificationType {
  SECURITY_ALERT
  SYSTEM_STATUS
  USER_MANAGEMENT
  PROJECT_MANAGEMENT
}

enum AuthMethod {
  GOOGLE_OAUTH
  GITHUB_OAUTH
  FACEBOOK_OAUTH
  EMAIL_AND_PASSWORD_SIGNIN
  MAGICLINK
}

enum AdminNotificationSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LoginStatus {
  SUCCESS
  FAILURE
}
