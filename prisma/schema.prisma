generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin model
model Admin {
  id                  String               @id @unique() @default(cuid())
  email               String               @unique() @db.VarChar(255)
  password            String               @db.VarChar(255)
  firstName           String               @map("first_name") @db.VarChar(255)
  lastName            String               @map("last_name") @db.VarChar(255)
  isVerified          Boolean              @default(false)
  mfaEnabled          Boolean              @default(false)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  projects            Project[]
  webAuthnCredentials WebAuthnCredential[]
  challenge           Challenge[]
  AdminRefreshToken   AdminRefreshToken[]

  @@map("admins")
}

model AdminRefreshToken {
  id        String   @id @unique @default(cuid())
  adminId   String   @map("admin_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("admin_refresh_tokens")
}

// Project model
model Project {
  id                String             @id @unique() @default(cuid())
  name              String             @db.VarChar(255)
  apiKey            String             @unique() @map("api_key") @db.VarChar(64)
  clientKey         String             @unique() @default(cuid()) @map("client_key") @db.VarChar(64)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  adminId           String             @map("admin_id")
  admin             Admin              @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users             User[]
  oauthProviders    OAuthProvider[]
  userProjects      UserProject[]
  refreshTokens     RefreshToken[]
  roles             Role[]
  permissions       Permission[]
  logins            Login[]
  userOauthAccounts UserOauthAccount[]
  magicLinks        MagicLink[]
  projectSettings   ProjectSettings?
  BlockList         BlockList[]

  @@unique([name, adminId], name: "project_name_admin_id_unique")
  @@map("projects")
}

model ProjectSettings {
  id                                String  @id @unique @default(cuid())
  projectId                         String  @unique @map("project_id")
  refreshTokenDays                  Int     @default(7) @map("refresh_token_days")
  magicLinkTokenAvailabilityMinutes Int     @default(10) @map("magiclink_token_availability_minutes")
  allowNames                        Boolean @default(true) @map("allow_names")
  passwordMinLength                 Int     @default(8) @map("password_min_length")
  passwordRequireUppercase          Boolean @default(true) @map("password_require_uppercase")
  passwordRequireLowercase          Boolean @default(true) @map("password_require_lowercase")
  passwordRequireNumbers            Boolean @default(true) @map("password_require_numbers")
  passwordRequireSpecialChars       Boolean @default(true) @map("password_require_special_chars")
  clearLoginsAfterDays              Int?    @default(1) @map("clear_logins_after_days")
  allowMultipleCredentials          Boolean @default(false) @map("allow_multiple_credentials")
  preventPreviousPasswords          Boolean @default(false) @map("prevent_previous_passwords")
  allowPasskeyVerification          Boolean @default(false) @map("allow_passkey_verification")
  maxLoginAttempts                  Int     @default(5) @map("max_login_attempts")
  lockoutDurationMinutes            Int     @default(30) @map("lockout_duration_minutes")
  project                           Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("project_settings")
}

// User model
model User {
  id                  String               @id @unique() @default(cuid())
  email               String               @unique() @db.VarChar(255)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  projects            Project[]
  userProjects        UserProject[]
  oauthAccounts       UserOauthAccount[]
  refreshTokens       RefreshToken[]
  logins              Login[]
  magicLinks          MagicLink[]
  webAuthnCredentials WebAuthnCredential[]
  challenges          Challenge?
  BlockList           BlockList[]

  @@map("users")
}

// Role model
model Role {
  id              String           @id @unique() @default(cuid())
  name            String           @db.VarChar(50)
  projectId       String           @map("project_id")
  project         Project          @relation(fields: [projectId], references: [id])
  rolePermissions RolePermission[]
  userProjects    UserProject[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@unique([name, projectId])
  @@map("roles")
}

// Permission model
model Permission {
  id              String           @id @unique() @default(cuid())
  name            String           @db.VarChar(200)
  description     String?
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  project         Project?         @relation(fields: [projectId], references: [id])
  projectId       String?

  @@map("permissions")
}

// RolePermission model
model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// UserProject model
model UserProject {
  userId     String     @map("user_id")
  user       User       @relation(fields: [userId], references: [id])
  password   String?    @db.Text
  firstName  String?    @map("first_name") @db.VarChar(255)
  lastName   String?    @map("last_name") @db.VarChar(255)
  projectId  String     @map("project_id")
  userStatus UserStatus @default(ACTIVE) @map("user_status")
  isVerified Boolean    @default(false)
  project    Project    @relation(fields: [projectId], references: [id])
  roleId     String?    @map("role_id")
  role       Role?      @relation(fields: [roleId], references: [id])
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@id([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([roleId])
  @@map("user_projects")
}

// OAuthProvider model
model OAuthProvider {
  id            String             @id @unique() @default(cuid())
  name          OAuthProviders     @default(GOOGLE) @map("auth_method")
  projectId     String             @map("project_id")
  project       Project            @relation(fields: [projectId], references: [id])
  clientId      String             @unique() @map("client_id")
  clientSecret  String             @unique() @map("client_secret")
  redirectUri   String @map("redirect_uri")
  oauthAccounts UserOauthAccount[]
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  @@unique([name, projectId])
  @@map("oauth_providers")
}

model OAuthState {
  id           String         @id @unique() @default(cuid())
  providerId   String
  providerName OAuthProviders

  @@map("oauth_state")
}

// UserOauthAccount model
model UserOauthAccount {
  id                    String        @id @unique() @default(cuid())
  userId                String        @map("user_id")
  providerId            String        @map("provider_id")
  projectId             String        @map("project_id")
  project               Project       @relation(fields: [projectId], references: [id])
  providerUserId        String        @map("provider_user_id") @db.VarChar(255)
  accessToken           String?       @map("access_token")
  refreshToken          String?       @map("refresh_token")
  refreshTokenExpiresAt DateTime?     @map("refresh_token_expires_at")
  tokenCreatedAt        DateTime?     @map("token_created_at")
  tokenUpdatedAt        DateTime?     @map("token_updated_at")
  user                  User          @relation(fields: [userId], references: [id])
  provider              OAuthProvider @relation(fields: [providerId], references: [id])

  @@unique([providerId, providerUserId])
  @@index([userId])
  @@index([providerId])
  @@map("user_oauth_accounts")
}

model MagicLink {
  id        String   @id @unique() @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@map("magic_links")
}

// OTP model
model Otp {
  id        String   @id @unique() @default(cuid())
  email     String   @unique() @map("email")
  code      String   @db.VarChar(6)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("otps")
}

// RefreshToken model
model RefreshToken {
  id         String     @id @unique() @default(cuid())
  userId     String?    @map("user_id")
  projectId  String?    @map("project_id")
  token      String     @unique()
  expiresAt  DateTime   @map("expires_at")
  state      TokenState @default(ACTIVE)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  authMethod AuthMethod @default(EMAIL_AND_PASSWORD_SIGNIN) @map("auth_method")
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project    Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("refresh_tokens")
}

model Challenge {
  id        String  @id @unique() @default(cuid())
  adminId   String  @unique() @map("admin_id")
  userId    String? @unique() @map("user_id")
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin     Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  challenge String

  @@index([adminId])
  @@map("challenges")
}

model WebAuthnCredential {
  id             String   @id @unique() @default(cuid())
  userId         String   @map("user_id")
  adminId        String   @map("admin_id")
  publicKey      Bytes    @map("public_key")
  credentialId   String   @unique()
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin          Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webauthnUserId String   @map("webauthn_userid")
  counter        BigInt?
  deviceType     String   @map("device_type") @db.VarChar(32)
  backedUp       Boolean  @default(false) @map("backed_up")
  transports     String[]
  createdAt      DateTime @default(now()) @map("created_at")
  lastUsedAt     DateTime @updatedAt @map("last_used_at")

  @@unique([userId, webauthnUserId])
  @@index([webauthnUserId])
  @@map("webauthn_credentials")
}

model Login {
  id         String      @id @unique() @default(cuid())
  userId     String      @map("user_id")
  projectId  String      @map("project_id")
  ipAddress  String      @map("ip_address")
  userAgent  String      @map("user_agent")
  attempts   Int         @default(1) @map("attempts")
  authMethod AuthMethod
  status     LoginStatus
  createdAt  DateTime    @default(now()) @map("created_at")
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project    Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("login")
}

model BlockList {
  id        String   @id @unique() @default(cuid())
  userId    String?  @map("user_id")
  projectId String   @map("project_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, projectId])
  @@map("blocklist")
}

enum TokenState {
  ACTIVE
  EXPIRED
  REVOKED
  BLACKLISTED
}

enum AuthMethod {
  GOOGLE_OAUTH
  GITHUB_OAUTH
  FACEBOOK_OAUTH
  EMAIL_AND_PASSWORD_SIGNIN
  MAGICLINK
}

enum LoginStatus {
  SUCCESS
  FAILURE
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum OAuthProviders {
  GOOGLE
  GITHUB
}
